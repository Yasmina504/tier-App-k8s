apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment
  labels:
    app: tier-app
    tier: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: tier-app
      tier: backend
  template:
    metadata:
      labels:
        app: tier-app
        tier: backend
    spec:
      containers:
      - name: backend
        image: python:3.11-slim
        command: ["/bin/sh", "-c"]
        args:
          - |
            pip install flask psycopg2-binary sqlalchemy
            cat > /app.py << 'EOF'
            import os
            from flask import Flask, jsonify
            import psycopg2
            
            app = Flask(__name__)
            
            # DATABASE_URL Ø«Ø§Ø¨Øª ÙˆÙ…Ø¶Ù…ÙˆÙ†
            DATABASE_URL = "postgresql://myuser:mypassword@db-service:5432/tierapp"
            
            @app.route('/')
            def home():
                return jsonify({
                    "status": "âœ… BACKEND WORKING!",
                    "message": "Kubernetes Deployment Successful",
                    "database_url": DATABASE_URL
                })
            
            @app.route('/health')
            def health():
                try:
                    conn = psycopg2.connect(DATABASE_URL)
                    conn.close()
                    return jsonify({"status": "ðŸŸ¢ Healthy", "database": "Connected"})
                except Exception as e:
                    return jsonify({"status": "ðŸ”´ Unhealthy", "error": str(e)}), 500
            
            @app.route('/api/data')
            def data():
                return jsonify({"data": [1, 2, 3, 4, 5]})
            
            if __name__ == '__main__':
                print("ðŸš€ Backend Server Starting...")
                print(f"ðŸ“Š Database URL: {DATABASE_URL}")
                app.run(host='0.0.0.0', port=5000, debug=True)
            EOF
            
            echo "âœ… Starting Fixed Backend Application..."
            python /app.py
        ports:
        - containerPort: 5000
---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
spec:
  selector:
    app: tier-app
    tier: backend
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000
  type: ClusterIP
